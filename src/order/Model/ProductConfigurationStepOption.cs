/*
 * order Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = order.Client.OpenAPIDateConverter;

namespace order.Model
{
    /// <summary>
    /// ProductConfigurationStepOption
    /// </summary>
    [DataContract(Name = "ProductConfigurationStepOption")]
    public partial class ProductConfigurationStepOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductConfigurationStepOption" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="grn">grn.</param>
        /// <param name="label">label.</param>
        /// <param name="priceVariation">priceVariation.</param>
        /// <param name="image">image.</param>
        /// <param name="hasQuantity">hasQuantity.</param>
        /// <param name="quantity">quantity.</param>
        public ProductConfigurationStepOption(string id = default(string), string grn = default(string), string label = default(string), OrderMoney priceVariation = default(OrderMoney), OptionImage image = default(OptionImage), bool hasQuantity = default(bool), long quantity = default(long))
        {
            this.Id = id;
            this.Grn = grn;
            this.Label = label;
            this.PriceVariation = priceVariation;
            this.Image = image;
            this.HasQuantity = hasQuantity;
            this.Quantity = quantity;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Grn
        /// </summary>
        [DataMember(Name = "grn", EmitDefaultValue = false)]
        public string Grn { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets PriceVariation
        /// </summary>
        [DataMember(Name = "priceVariation", EmitDefaultValue = false)]
        public OrderMoney PriceVariation { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public OptionImage Image { get; set; }

        /// <summary>
        /// Gets or Sets HasQuantity
        /// </summary>
        [DataMember(Name = "hasQuantity", EmitDefaultValue = true)]
        public bool HasQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public long Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductConfigurationStepOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Grn: ").Append(Grn).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  PriceVariation: ").Append(PriceVariation).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  HasQuantity: ").Append(HasQuantity).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
