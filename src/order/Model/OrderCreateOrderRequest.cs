/*
 * order Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = order.Client.OpenAPIDateConverter;

namespace order.Model
{
    /// <summary>
    /// OrderCreateOrderRequest
    /// </summary>
    [DataContract(Name = "orderCreateOrderRequest")]
    public partial class OrderCreateOrderRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public OrderCurrency Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderCreateOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCreateOrderRequest" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId (required).</param>
        /// <param name="number">number (required).</param>
        /// <param name="channel">channel.</param>
        /// <param name="market">market (required).</param>
        /// <param name="locale">locale (required).</param>
        /// <param name="items">items (required).</param>
        /// <param name="paymentsInfo">paymentsInfo.</param>
        /// <param name="shipmentsInfo">shipmentsInfo.</param>
        /// <param name="promotions">promotions.</param>
        /// <param name="payments">payments.</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="subtotals">subtotals (required).</param>
        /// <param name="totals">totals (required).</param>
        /// <param name="vatIncluded">vatIncluded (required).</param>
        /// <param name="billingAddress">billingAddress (required).</param>
        /// <param name="shippingAddress">shippingAddress (required).</param>
        /// <param name="customerInfo">customerInfo (required).</param>
        /// <param name="cartGrn">cartGrn.</param>
        /// <param name="onHold">onHold.</param>
        /// <param name="notes">notes.</param>
        public OrderCreateOrderRequest(string tenantId = default(string), string number = default(string), string channel = default(string), string market = default(string), string locale = default(string), List<OrderOrderDataItem> items = default(List<OrderOrderDataItem>), List<OrderDataPaymentInfo> paymentsInfo = default(List<OrderDataPaymentInfo>), List<OrderDataShipmentInfo> shipmentsInfo = default(List<OrderDataShipmentInfo>), List<OrderDataPromotionInfo> promotions = default(List<OrderDataPromotionInfo>), List<CreateOrderRequestInitialPayment> payments = default(List<CreateOrderRequestInitialPayment>), OrderCurrency currency = default(OrderCurrency), Dictionary<string, OrderDataSubtotal> subtotals = default(Dictionary<string, OrderDataSubtotal>), Dictionary<string, OrderDataTotal> totals = default(Dictionary<string, OrderDataTotal>), bool vatIncluded = default(bool), OrderPostalAddress billingAddress = default(OrderPostalAddress), OrderPostalAddress shippingAddress = default(OrderPostalAddress), OrderDataCustomerInfo customerInfo = default(OrderDataCustomerInfo), string cartGrn = default(string), bool onHold = default(bool), string notes = default(string))
        {
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new ArgumentNullException("tenantId is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.TenantId = tenantId;
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new ArgumentNullException("number is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.Number = number;
            // to ensure "market" is required (not null)
            if (market == null)
            {
                throw new ArgumentNullException("market is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.Market = market;
            // to ensure "locale" is required (not null)
            if (locale == null)
            {
                throw new ArgumentNullException("locale is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.Locale = locale;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.Items = items;
            this.Currency = currency;
            // to ensure "subtotals" is required (not null)
            if (subtotals == null)
            {
                throw new ArgumentNullException("subtotals is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.Subtotals = subtotals;
            // to ensure "totals" is required (not null)
            if (totals == null)
            {
                throw new ArgumentNullException("totals is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.Totals = totals;
            this.VatIncluded = vatIncluded;
            // to ensure "billingAddress" is required (not null)
            if (billingAddress == null)
            {
                throw new ArgumentNullException("billingAddress is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.BillingAddress = billingAddress;
            // to ensure "shippingAddress" is required (not null)
            if (shippingAddress == null)
            {
                throw new ArgumentNullException("shippingAddress is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.ShippingAddress = shippingAddress;
            // to ensure "customerInfo" is required (not null)
            if (customerInfo == null)
            {
                throw new ArgumentNullException("customerInfo is a required property for OrderCreateOrderRequest and cannot be null");
            }
            this.CustomerInfo = customerInfo;
            this.Channel = channel;
            this.PaymentsInfo = paymentsInfo;
            this.ShipmentsInfo = shipmentsInfo;
            this.Promotions = promotions;
            this.Payments = payments;
            this.CartGrn = cartGrn;
            this.OnHold = onHold;
            this.Notes = notes;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", IsRequired = true, EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", IsRequired = true, EmitDefaultValue = true)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", IsRequired = true, EmitDefaultValue = true)]
        public string Market { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", IsRequired = true, EmitDefaultValue = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderOrderDataItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets PaymentsInfo
        /// </summary>
        [DataMember(Name = "paymentsInfo", EmitDefaultValue = false)]
        public List<OrderDataPaymentInfo> PaymentsInfo { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentsInfo
        /// </summary>
        [DataMember(Name = "shipmentsInfo", EmitDefaultValue = false)]
        public List<OrderDataShipmentInfo> ShipmentsInfo { get; set; }

        /// <summary>
        /// Gets or Sets Promotions
        /// </summary>
        [DataMember(Name = "promotions", EmitDefaultValue = false)]
        public List<OrderDataPromotionInfo> Promotions { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        public List<CreateOrderRequestInitialPayment> Payments { get; set; }

        /// <summary>
        /// Gets or Sets Subtotals
        /// </summary>
        [DataMember(Name = "subtotals", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, OrderDataSubtotal> Subtotals { get; set; }

        /// <summary>
        /// Gets or Sets Totals
        /// </summary>
        [DataMember(Name = "totals", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, OrderDataTotal> Totals { get; set; }

        /// <summary>
        /// Gets or Sets VatIncluded
        /// </summary>
        [DataMember(Name = "vatIncluded", IsRequired = true, EmitDefaultValue = true)]
        public bool VatIncluded { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billingAddress", IsRequired = true, EmitDefaultValue = true)]
        public OrderPostalAddress BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shippingAddress", IsRequired = true, EmitDefaultValue = true)]
        public OrderPostalAddress ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInfo
        /// </summary>
        [DataMember(Name = "customerInfo", IsRequired = true, EmitDefaultValue = true)]
        public OrderDataCustomerInfo CustomerInfo { get; set; }

        /// <summary>
        /// Gets or Sets CartGrn
        /// </summary>
        [DataMember(Name = "cartGrn", EmitDefaultValue = false)]
        public string CartGrn { get; set; }

        /// <summary>
        /// Gets or Sets OnHold
        /// </summary>
        [DataMember(Name = "onHold", EmitDefaultValue = true)]
        public bool OnHold { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCreateOrderRequest {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  PaymentsInfo: ").Append(PaymentsInfo).Append("\n");
            sb.Append("  ShipmentsInfo: ").Append(ShipmentsInfo).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Subtotals: ").Append(Subtotals).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  VatIncluded: ").Append(VatIncluded).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  CustomerInfo: ").Append(CustomerInfo).Append("\n");
            sb.Append("  CartGrn: ").Append(CartGrn).Append("\n");
            sb.Append("  OnHold: ").Append(OnHold).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
