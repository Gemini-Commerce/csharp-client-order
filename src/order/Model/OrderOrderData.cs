/*
 * order Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = order.Client.OpenAPIDateConverter;

namespace order.Model
{
    /// <summary>
    /// OrderOrderData
    /// </summary>
    [DataContract(Name = "orderOrderData")]
    public partial class OrderOrderData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public OrderCurrency? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderOrderData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderOrderData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderOrderData" /> class.
        /// </summary>
        /// <param name="number">number.</param>
        /// <param name="channel">channel.</param>
        /// <param name="market">market.</param>
        /// <param name="locale">locale (required).</param>
        /// <param name="additionalInfo">additionalInfo.</param>
        /// <param name="documents">documents.</param>
        /// <param name="items">items.</param>
        /// <param name="payments">payments.</param>
        /// <param name="shipments">shipments.</param>
        /// <param name="paymentsInfo">paymentsInfo.</param>
        /// <param name="shipmentsInfo">shipmentsInfo.</param>
        /// <param name="promotions">promotions.</param>
        /// <param name="currency">currency.</param>
        /// <param name="subtotals">subtotals.</param>
        /// <param name="totals">totals.</param>
        /// <param name="vatIncluded">vatIncluded.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="customerInfo">customerInfo.</param>
        /// <param name="cartGrn">cartGrn.</param>
        /// <param name="onHold">onHold.</param>
        /// <param name="historyEvents">historyEvents.</param>
        /// <param name="notes">notes.</param>
        /// <param name="isDeleted">this field is used to delete an order in \&quot;soft-delete mode\&quot;. This field must be used from get/list endpoint to exclude these orders..</param>
        public OrderOrderData(string number = default(string), string channel = default(string), string market = default(string), string locale = default(string), Object additionalInfo = default(Object), List<OrderDataDocument> documents = default(List<OrderDataDocument>), List<OrderOrderDataItem> items = default(List<OrderOrderDataItem>), List<OrderPayment> payments = default(List<OrderPayment>), List<OrderShipment> shipments = default(List<OrderShipment>), List<OrderDataPaymentInfo> paymentsInfo = default(List<OrderDataPaymentInfo>), List<OrderDataShipmentInfo> shipmentsInfo = default(List<OrderDataShipmentInfo>), List<OrderDataPromotionInfo> promotions = default(List<OrderDataPromotionInfo>), OrderCurrency? currency = default(OrderCurrency?), Dictionary<string, OrderDataSubtotal> subtotals = default(Dictionary<string, OrderDataSubtotal>), Dictionary<string, OrderDataTotal> totals = default(Dictionary<string, OrderDataTotal>), bool vatIncluded = default(bool), OrderPostalAddress billingAddress = default(OrderPostalAddress), OrderPostalAddress shippingAddress = default(OrderPostalAddress), OrderDataCustomerInfo customerInfo = default(OrderDataCustomerInfo), string cartGrn = default(string), bool onHold = default(bool), List<OrderDataHistory> historyEvents = default(List<OrderDataHistory>), string notes = default(string), bool isDeleted = default(bool))
        {
            // to ensure "locale" is required (not null)
            if (locale == null)
            {
                throw new ArgumentNullException("locale is a required property for OrderOrderData and cannot be null");
            }
            this.Locale = locale;
            this.Number = number;
            this.Channel = channel;
            this.Market = market;
            this.AdditionalInfo = additionalInfo;
            this.Documents = documents;
            this.Items = items;
            this.Payments = payments;
            this.Shipments = shipments;
            this.PaymentsInfo = paymentsInfo;
            this.ShipmentsInfo = shipmentsInfo;
            this.Promotions = promotions;
            this.Currency = currency;
            this.Subtotals = subtotals;
            this.Totals = totals;
            this.VatIncluded = vatIncluded;
            this.BillingAddress = billingAddress;
            this.ShippingAddress = shippingAddress;
            this.CustomerInfo = customerInfo;
            this.CartGrn = cartGrn;
            this.OnHold = onHold;
            this.HistoryEvents = historyEvents;
            this.Notes = notes;
            this.IsDeleted = isDeleted;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Grn
        /// </summary>
        [DataMember(Name = "grn", EmitDefaultValue = false)]
        public string Grn { get; private set; }

        /// <summary>
        /// Returns false as Grn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGrn()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; private set; }

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets Market
        /// </summary>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public string Market { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", IsRequired = true, EmitDefaultValue = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name = "additionalInfo", EmitDefaultValue = false)]
        public Object AdditionalInfo { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public List<OrderDataDocument> Documents { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<OrderOrderDataItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        public List<OrderPayment> Payments { get; set; }

        /// <summary>
        /// Gets or Sets Shipments
        /// </summary>
        [DataMember(Name = "shipments", EmitDefaultValue = false)]
        public List<OrderShipment> Shipments { get; set; }

        /// <summary>
        /// Gets or Sets PaymentsInfo
        /// </summary>
        [DataMember(Name = "paymentsInfo", EmitDefaultValue = false)]
        public List<OrderDataPaymentInfo> PaymentsInfo { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentsInfo
        /// </summary>
        [DataMember(Name = "shipmentsInfo", EmitDefaultValue = false)]
        public List<OrderDataShipmentInfo> ShipmentsInfo { get; set; }

        /// <summary>
        /// Gets or Sets Promotions
        /// </summary>
        [DataMember(Name = "promotions", EmitDefaultValue = false)]
        public List<OrderDataPromotionInfo> Promotions { get; set; }

        /// <summary>
        /// Gets or Sets Subtotals
        /// </summary>
        [DataMember(Name = "subtotals", EmitDefaultValue = false)]
        public Dictionary<string, OrderDataSubtotal> Subtotals { get; set; }

        /// <summary>
        /// Gets or Sets Totals
        /// </summary>
        [DataMember(Name = "totals", EmitDefaultValue = false)]
        public Dictionary<string, OrderDataTotal> Totals { get; set; }

        /// <summary>
        /// Gets or Sets VatIncluded
        /// </summary>
        [DataMember(Name = "vatIncluded", EmitDefaultValue = true)]
        public bool VatIncluded { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "billingAddress", EmitDefaultValue = false)]
        public OrderPostalAddress BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shippingAddress", EmitDefaultValue = false)]
        public OrderPostalAddress ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets CustomerInfo
        /// </summary>
        [DataMember(Name = "customerInfo", EmitDefaultValue = false)]
        public OrderDataCustomerInfo CustomerInfo { get; set; }

        /// <summary>
        /// Gets or Sets CartGrn
        /// </summary>
        [DataMember(Name = "cartGrn", EmitDefaultValue = false)]
        public string CartGrn { get; set; }

        /// <summary>
        /// Gets or Sets OnHold
        /// </summary>
        [DataMember(Name = "onHold", EmitDefaultValue = true)]
        public bool OnHold { get; set; }

        /// <summary>
        /// Gets or Sets HistoryEvents
        /// </summary>
        [DataMember(Name = "historyEvents", EmitDefaultValue = false)]
        public List<OrderDataHistory> HistoryEvents { get; set; }

        /// <summary>
        /// Gets or Sets Fulfillments
        /// </summary>
        [DataMember(Name = "fulfillments", EmitDefaultValue = false)]
        public List<OrderFulfillment> Fulfillments { get; private set; }

        /// <summary>
        /// Returns false as Fulfillments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFulfillments()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// this field is used to delete an order in \&quot;soft-delete mode\&quot;. This field must be used from get/list endpoint to exclude these orders.
        /// </summary>
        /// <value>this field is used to delete an order in \&quot;soft-delete mode\&quot;. This field must be used from get/list endpoint to exclude these orders.</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// this field is used to save the original created_at order date. The created_at field is used to filter data.
        /// </summary>
        /// <value>this field is used to save the original created_at order date. The created_at field is used to filter data.</value>
        [DataMember(Name = "insertedAt", EmitDefaultValue = false)]
        public DateTime InsertedAt { get; private set; }

        /// <summary>
        /// Returns false as InsertedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInsertedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name = "deletedAt", EmitDefaultValue = false)]
        public DateTime DeletedAt { get; private set; }

        /// <summary>
        /// Returns false as DeletedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeletedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderOrderData {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Grn: ").Append(Grn).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  PaymentsInfo: ").Append(PaymentsInfo).Append("\n");
            sb.Append("  ShipmentsInfo: ").Append(ShipmentsInfo).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Subtotals: ").Append(Subtotals).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  VatIncluded: ").Append(VatIncluded).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  CustomerInfo: ").Append(CustomerInfo).Append("\n");
            sb.Append("  CartGrn: ").Append(CartGrn).Append("\n");
            sb.Append("  OnHold: ").Append(OnHold).Append("\n");
            sb.Append("  HistoryEvents: ").Append(HistoryEvents).Append("\n");
            sb.Append("  Fulfillments: ").Append(Fulfillments).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  InsertedAt: ").Append(InsertedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
